---
inputs:
  docker-hub-username:
    description: Username for Docker Hub login
  docker-hub-access-token:
    description: Access token for Docker Hub login
  service-containers:
    description: Service containers to start
  db-name:
    description: Database name
runs:
  using: "composite"
  steps:
    - name: Install docker-compose
      run: |
        echo "::group::Install docker-compose"
        python -m pip install --upgrade pip
        python -m pip install --upgrade docker-compose
        echo "::endgroup::"
      shell: bash
    - name: Print versions
      run: |
        echo "::group::Print versions"
        docker version
        docker-compose --version
        echo "::endgroup::"
      shell: bash
    - name: Login to Docker Hub
      run: |
        echo "::group::Login to Docker Hub"
        echo "${DOCKER_HUB_ACCESS_TOKEN}" | \
            docker login --username "${{ inputs.docker-hub-username }}" \
            --password-stdin
        echo "::endgroup::"
      env:
        DOCKER_HUB_ACCESS_TOKEN: ${{ inputs.docker-hub-access-token }}
      shell: bash
      if: ${{ inputs.docker-hub-username != '' }}
    - name: Start service containers
      run: |
        # Start the service containers before building custom container images.
        # This gives the database enough time to start. (At least in our case.)
        echo "::group::Start service containers"
        docker-compose up -d ${{ inputs.service-containers }}
        echo "::endgroup::"
      shell: bash
      if: ${{ inputs.service-containers != '' }}
    - name: Build container image
      run: |
        echo "::group::Build container image"
        docker-compose build --pull
        echo "::endgroup::"
      shell: bash
    - name: Create DB
      run: |
        # The database containers name must be 'db' and it must be PostgreSQL.
        echo "::group::Create DB"
        docker-compose run db psql -h db -U postgres \
            -c "CREATE DATABASE ${{ inputs.db-name }};"
        echo "::endgroup::"
      shell: bash
      if: ${{ inputs.db-name != '' }}
    - name: Start all containers
      run: |
        echo "::group::Start all containers"
        docker-compose up -d
        docker-compose logs
        echo "::endgroup::"
      shell: bash
