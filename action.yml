---
inputs:
  docker-hub-username:
    description: Username for Docker Hub login
  docker-hub-access-token:
    description: Access token for Docker Hub login
  aws-access-key-id:
    description: Access key for AWS user with Amazon ECR access
    default: ''
  aws-secret-access-key:
    description: Secret access key for AWS user with Amazon ECR access
    default: ''
  aws-region:
    description: AWS region where Amazon ECR is located
    default: eu-west-1
  aws-account-id:
    description: Id of AWS account where Amazon ECR is located
    default: ''
  service-containers:
    description: Service containers to start
  db-name:
    description: Database name
  apply-migrations:
    description: Set to true to apply migrations
    required: false
    default: false
  working-directory:
    description: The working directory where the commands are run
    required: false
    default: ./
runs:
  using: "composite"
  steps:
    - name: Install docker-compose
      run: |
        echo "::group::Install docker-compose"
        python -m pip install --upgrade pip
        python -m pip install --upgrade docker-compose
        echo "::endgroup::"
      shell: bash
      working-directory: ${{ inputs.working-directory }}
    - name: Print versions
      run: |
        echo "::group::Print versions"
        docker version
        docker-compose --version
        echo "::endgroup::"
      shell: bash
      working-directory: ${{ inputs.working-directory }}
    - name: Login to Docker Hub
      run: |
        echo "::group::Login to Docker Hub"
        if [ "${{ inputs.docker-hub-username }}" != "" ]; then
          echo "${DOCKER_HUB_ACCESS_TOKEN}" | \
              docker login --username "${{ inputs.docker-hub-username }}" \
              --password-stdin
        else
          echo "skipped"
        fi
        echo "::endgroup::"
      env:
        DOCKER_HUB_ACCESS_TOKEN: ${{ inputs.docker-hub-access-token }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}
    - name: Login to Amazon ECR
      run: |
        echo "::group::Login to Amazon ECR"
        if [ "${{ inputs.aws-access-key-id }}" != "" ]; then
          python -m venv ${HOME}/.venv-docker-login
          ${HOME}/.venv-docker-login/bin/python -m pip install "boto3>=1.26.97"
          ${HOME}/.venv-docker-login/bin/python -c "
            from base64 import b64decode
            import boto3
            ecr_client = boto3.client('ecr')
            auth_token = ecr_client.get_authorization_token(
              registryIds=['${{ inputs.aws-account-id }}']
            )
            assert len(auth_token['authorizationData']) == 1
            auth_data = auth_token['authorizationData'][0]
            username, password = b64decode(auth_data['authorizationToken']).decode().split(':')
            assert username == 'AWS'
            print(password)" | \
              docker login --username AWS --password-stdin \
              "${{ inputs.aws-account-id }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com"
        else
          echo "skipped"
        fi
        echo "::endgroup::"
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws-access-key-id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws-secret-access-key }}
        AWS_DEFAULT_REGION: ${{ inputs.aws-region }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}
    - name: Start service containers
      run: |
        # Start the service containers before building custom container images.
        # This gives the database enough time to start. (At least in our case.)
        echo "::group::Start service containers"
        if [ "${{ inputs.service-containers }}" != "" ]; then
          docker-compose up -d ${{ inputs.service-containers }}
        else
          echo "skipped"
        fi
        echo "::endgroup::"
      shell: bash
      working-directory: ${{ inputs.working-directory }}
    - name: Build container image
      run: |
        echo "::group::Build container image"
        docker-compose build --pull
        echo "::endgroup::"
      shell: bash
      working-directory: ${{ inputs.working-directory }}
    - name: Create DB
      run: |
        # The database containers name must be 'db' and it must be PostgreSQL.
        echo "::group::Create DB"
        if [ "${{ inputs.db-name }}" != "" ]; then
          docker-compose run db psql -h db -U postgres \
              -c "CREATE DATABASE ${{ inputs.db-name }};"
        else
          echo "skipped"
        fi
        echo "::endgroup::"
      shell: bash
      working-directory: ${{ inputs.working-directory }}
    - name: Apply migrations
      run: |
        echo "::group::Apply migrations"
        if [ "${{ inputs.apply-migrations }}" == "true" ]; then
          docker-compose run web migrate
        else
          echo "skipped"
        fi
        echo "::endgroup::"
      shell: bash
      working-directory: ${{ inputs.working-directory }}
    - name: Start all containers
      run: |
        echo "::group::Start all containers"
        docker-compose up -d
        docker-compose logs
        echo "::endgroup::"
      shell: bash
      working-directory: ${{ inputs.working-directory }}
